SVRHA PROJEKTA
  -Implementacija Dekkerovog algoritma za međusobno isključivanje dva procesa u C-u.
  -Demonstracija sinkronizacije procesa koristeći zajedničku memoriju.
  -Ispisivanje poruka (i, k, m) u kritičnom odsjecku prema pseudokodu iz zadatka.
  -Omogućavanje sigurnog prekida programa (Ctrl+C) uz čišćenje resursa.

IMPLEMENTACIJA
  -Kod koristi fork() za stvaranje dva paralelna procesa: proces 0 i proces 1.
  -Zajednička memorija (shmget, shmat) koristi se za dijeljenje pthread_mutex_t za sinkronizaciju.
  -Funkcije udi_u_kriticni_odsjecak i izadi_iz_kriticnog_odsjecka koriste mutex za osiguravanje međusobnog isključivanja.
  -Svaki proces ispisuje 25 poruka (5 iteracija k × 5 iteracija m) u kritičnom odsjecku.
  -Obrada signala SIGINT (Ctrl+C) čisti zajedničku memoriju i završava program.

DATOTEKE
  -program.c: Glavna datoteka s implementacijom zadatka.

KAKO POKRENUTI
  -Sastavite program: gcc program.c -o program -pthread.
  -Pokrenite program: ./program .
  -Očekivani ispis: 50 poruka (25 od procesa 0, 25 od procesa 1) bez preklapanja.
  -Za prekid programa pritisnite Ctrl+C – vidjet ćete poruku "Zajednicka memorija ociscena".ć

POZNATI PROBLEMI
  -Dekkerovim algoritmom može doći do preklapanja ispisa na višeprocesorskim sustavima zbog nedostatka atomskih operacija.
